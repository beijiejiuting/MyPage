(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{472:function(t,a,e){"use strict";e.r(a);var r=e(2),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java基础-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基础-下"}},[t._v("#")]),t._v(" Java基础(下)")]),t._v(" "),a("h2",{attrs:{id:"stream类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream类"}},[t._v("#")]),t._v(" Stream类")]),t._v(" "),a("p",[t._v("三种获取(数组,列表,零散元素)")]),t._v(" "),a("p",[t._v("中间方法(filter,limit,skip,distinct,concat)")]),t._v(" "),a("p",[t._v("终结方法(forEach,count)")]),t._v(" "),a("h3",{attrs:{id:"collect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collect"}},[t._v("#")]),t._v(" collect")]),t._v(" "),a("p",[t._v("stream.collect(Collectors.toList/Set/Map(new Function<old,new>(){},new Function<old,new>(){}))")]),t._v(" "),a("h2",{attrs:{id:"file类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file类"}},[t._v("#")]),t._v(" File类")]),t._v(" "),a("h4",{attrs:{id:"构造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造"}},[t._v("#")]),t._v(" 构造")]),t._v(" "),a("h4",{attrs:{id:"判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断"}},[t._v("#")]),t._v(" 判断")]),t._v(" "),a("p",[t._v("isFile,isDirectory,exist")]),t._v(" "),a("h4",{attrs:{id:"获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取"}},[t._v("#")]),t._v(" 获取")]),t._v(" "),a("p",[t._v("length,getAbsolutePath,getPath,getName,lastModified")]),t._v(" "),a("h4",{attrs:{id:"创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),a("p",[t._v("createNewFile,mkdir,mkdirs")]),t._v(" "),a("h4",{attrs:{id:"删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),a("p",[t._v("delete")]),t._v(" "),a("h4",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历")]),t._v(" "),a("p",[t._v("listFiles")]),t._v(" "),a("h2",{attrs:{id:"io流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io流"}},[t._v("#")]),t._v(" IO流")]),t._v(" "),a("h3",{attrs:{id:"字节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节流"}},[t._v("#")]),t._v(" 字节流")]),t._v(" "),a("p",[t._v("In/OutputStream ->FileIn/OutputStream 构造参数为文件路径String/File")]),t._v(" "),a("h4",{attrs:{id:"fileinputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fileinputstream"}},[t._v("#")]),t._v(" FileInputStream")]),t._v(" "),a("p",[t._v("read(/byte[])末尾返回-1")]),t._v(" "),a("h4",{attrs:{id:"fileoutputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fileoutputstream"}},[t._v("#")]),t._v(" FileOutputStream")]),t._v(" "),a("p",[t._v("(不存在自动创建,默认重写,true追加)")]),t._v(" "),a("p",[t._v("write(int/byte[],string.getBytes)")]),t._v(" "),a("h4",{attrs:{id:"close-关流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-关流"}},[t._v("#")]),t._v(" close(关流)")]),t._v(" "),a("p",[t._v("try(需要close的对象,实现AutoCloseable,重写close ){IO}catch(Exception e){}")]),t._v(" "),a("h4",{attrs:{id:"字节缓冲流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节缓冲流"}},[t._v("#")]),t._v(" 字节缓冲流")]),t._v(" "),a("p",[t._v("BufferedIn/Outputstream(In/Outputstream) 内置数组长度8192")]),t._v(" "),a("h3",{attrs:{id:"字符流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符流"}},[t._v("#")]),t._v(" 字符流")]),t._v(" "),a("p",[t._v("字符流Reader,Writer ->FileReader/Writer 构造参数为文件路径String/File")]),t._v(" "),a("h4",{attrs:{id:"filereader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filereader"}},[t._v("#")]),t._v(" FileReader")]),t._v(" "),a("p",[t._v("read( /char[])末尾返回-1 内置数组长度8192")]),t._v(" "),a("h4",{attrs:{id:"filewriter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filewriter"}},[t._v("#")]),t._v(" FileWriter")]),t._v(" "),a("p",[t._v("(不存在自动创建,默认重写,true追加)")]),t._v(" "),a("p",[t._v("write(int/char[]/String)内置数组长度1024 不关流不写,flush(刷出数据)")]),t._v(" "),a("h4",{attrs:{id:"字符缓冲流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符缓冲流"}},[t._v("#")]),t._v(" 字符缓冲流")]),t._v(" "),a("p",[t._v("BufferedReader/Writer(Reader/Writer) 内置数组长度8192\nBufferedReader:read,readLine()末尾返回null,忽略\\n\nBufferedWriter:write,newLine()写出换行")]),t._v(" "),a("h3",{attrs:{id:"字符与字节转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符与字节转换"}},[t._v("#")]),t._v(" 字符与字节转换")]),t._v(" "),a("p",[t._v("字符转字节 string.getBytes( /charSetName) 字节转字符 String(byte[],charSetName)")]),t._v(" "),a("h3",{attrs:{id:"转换流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换流"}},[t._v("#")]),t._v(" 转换流")]),t._v(" "),a("p",[t._v("(按指定字符编码读写/字节流转字符流)")]),t._v(" "),a("p",[t._v("In/OutputStreamReader/Writer(In/OutputStream,charSetName) read/write")]),t._v(" "),a("h3",{attrs:{id:"序列化流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化流"}},[t._v("#")]),t._v(" 序列化流")]),t._v(" "),a("p",[t._v("构造ObjectIn/OutputStream(In/OutputStream)\nObjectOutputStream():序列化 writeObject(o) o要实现serializable接口(自动生成serialVersionUID,推荐手动写)\nObjectInputStream():反序列化 o=readObject()\ntransient关键字(修饰成员变量,不被序列化)")]),t._v(" "),a("h3",{attrs:{id:"打印流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打印流"}},[t._v("#")]),t._v(" 打印流")]),t._v(" "),a("p",[t._v("PrintStream (extends FileOutputStream)构造(OutputStream/File/String,charSetName)\nwrite(写出一个字节),print(),println()\nPrintWriter  (extends Writer)构造(OutputStream/File/String,boolean,charSetName)")]),t._v(" "),a("h3",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("p",[t._v("(extends HashTable)")]),t._v(" "),a("p",[t._v("set/getProperties string  PropertyNames()返回keySet(用来遍历)\nIO:  load(InputStream/Reader)    store(OutputStream/Writer,string)")]),t._v(" "),a("h2",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("h3",{attrs:{id:"三种实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种实现"}},[t._v("#")]),t._v(" 三种实现")]),t._v(" "),a("p",[t._v("1:extends Thread,重写run(),new对象.start()\n2:implements Runnable,重写run(),new对象,new Thread(o) t.start()\n3:implements Callabel,重写call(),new对象,new FutureTask(o),newThread(ft),t.start(),ft.get()")]),t._v(" "),a("h3",{attrs:{id:"相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关方法"}},[t._v("#")]),t._v(" 相关方法")]),t._v(" "),a("p",[t._v("get/setName()    Thread.currentThread(static)sleep(static)    set/getPriority优先级")]),t._v(" "),a("p",[t._v("setDaemon()守护    Thread.yield()礼让    t.join()插入到当前线程之前")]),t._v(" "),a("h3",{attrs:{id:"线程状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[t._v("#")]),t._v(" 线程状态")]),t._v(" "),a("p",[t._v("新建NEW->就绪RUNNABLE->运行->(阻塞BLCOKED)/(WAITING/TIMED_WAITING)->死亡TERMINATED")]),t._v(" "),a("h3",{attrs:{id:"同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步"}},[t._v("#")]),t._v(" 同步")]),t._v(" "),a("h4",{attrs:{id:"同步代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步代码块"}},[t._v("#")]),t._v(" 同步代码块")]),t._v(" "),a("p",[t._v("synchronized(o){}各个线程使用同一把锁才能实现 o=.class()字节码只加载一次")]),t._v(" "),a("h4",{attrs:{id:"同步方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步方法"}},[t._v("#")]),t._v(" 同步方法")]),t._v(" "),a("p",[t._v("synchronized关键字放在方法返回值之前 非static方法的锁对象this / static方法的锁对象是字节码")]),t._v(" "),a("h4",{attrs:{id:"锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),a("p",[t._v("new ReentrantLock(), lock.lock() lock.unlock()")]),t._v(" "),a("h3",{attrs:{id:"等待唤醒机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等待唤醒机制"}},[t._v("#")]),t._v(" 等待唤醒机制")]),t._v(" "),a("p",[t._v("thread:wait()    lock:notify(),notifyAll()")]),t._v(" "),a("h4",{attrs:{id:"阻塞队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列")]),t._v(" "),a("p",[t._v("Array/LinkedBlockingQueue  .put()  .take()  自动加锁")]),t._v(" "),a("h3",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("p",[t._v("ExecutorService p= new Executors.newFixed/CachedThreadPool(n)")]),t._v(" "),a("h4",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("p.submit(Runnable/Callable) p.shutdown")]),t._v(" "),a("h4",{attrs:{id:"自定义线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义线程池"}},[t._v("#")]),t._v(" 自定义线程池")]),t._v(" "),a("p",[t._v("核心线程满,等待队列满,才开临时线程")]),t._v(" "),a("p",[t._v("拒绝策略(Polocy):Abort(default)/Discard/DiscardOldest/CallerRuns")]),t._v(" "),a("h5",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("p",[t._v("ThreadPoolExecutor p=new TPE")]),t._v(" "),a("p",[t._v("(核心线程,最大线程,空闲线程最大存活时间,TimeUnit,BlockingQueue,ThreadFactory,Policy)")]),t._v(" "),a("h5",{attrs:{id:"线程池推荐大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池推荐大小"}},[t._v("#")]),t._v(" 线程池推荐大小")]),t._v(" "),a("p",[t._v("CPU密集型运算:最大并行数+1; I/O密集型运算:最大并行数"),a("em",[t._v("期望CPU利用率")]),t._v("(cal_time+wait_time)/cal_time")]),t._v(" "),a("h2",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),a("h3",{attrs:{id:"获取class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取class对象"}},[t._v("#")]),t._v(" 获取class对象")]),t._v(" "),a("p",[t._v("Class.forName(全类名)  类名.calss  对象.getClass()")]),t._v(" "),a("h3",{attrs:{id:"获取constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取constructor"}},[t._v("#")]),t._v(" 获取Constructor")]),t._v(" "),a("p",[t._v("get(Declared)Constructor(s)(),Declared全部,无Declared公共,无s传参数(参数类型.class)\n方法:con.getModifiers/Parameters()  con.newInstance()  con.setAccessible()")]),t._v(" "),a("h3",{attrs:{id:"获取成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取成员变量"}},[t._v("#")]),t._v(" 获取成员变量")]),t._v(" "),a("p",[t._v("get(Declared)Field(s)(),Declared全部,无Declared公共,无s传参数(变量名)\n方法:f.getModifiers/Name/Type() f.get/set(o)获取o的成员变量的值  f.setAccessible()")]),t._v(" "),a("h3",{attrs:{id:"获取成员方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取成员方法"}},[t._v("#")]),t._v(" 获取成员方法")]),t._v(" "),a("p",[t._v("get(Declared)Method(s)(),Declared全部(无父类),无Declared公共(含父类),无s传参数(方法名,参数类型.class)\n方法:m.getModifiers/Name/Parameters/ExceptionTypes()  m.setAccessible()")]),t._v(" "),a("h3",{attrs:{id:"调用成员方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用成员方法"}},[t._v("#")]),t._v(" 调用成员方法")]),t._v(" "),a("p",[t._v("new对象 m.invoke(o,参数)")]),t._v(" "),a("h2",{attrs:{id:"代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),a("p",[t._v("原类都要实现一个接口,接口中是要被代理的方法")]),t._v(" "),a("h3",{attrs:{id:"写代理工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写代理工具类"}},[t._v("#")]),t._v(" 写代理工具类")]),t._v(" "),a("p",[t._v("写获得代理对象方法(static),返回代理对象,参数为原类对象(被代理对象)\nreturn (强转接口类型)Proxy.newProxyInstance(类加载器,接口数组,代理方法)")]),t._v(" "),a("h4",{attrs:{id:"类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[t._v("#")]),t._v(" 类加载器")]),t._v(" "),a("p",[t._v("代理工具类.class.getClassLoader()")]),t._v(" "),a("h4",{attrs:{id:"接口数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口数组"}},[t._v("#")]),t._v(" 接口数组")]),t._v(" "),a("p",[t._v("new Class[]{接口.class}")]),t._v(" "),a("h4",{attrs:{id:"代理方法-接口类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理方法-接口类型"}},[t._v("#")]),t._v(" 代理方法(接口类型)")]),t._v(" "),a("p",[t._v("实现方法invoke(代理对象,method,参数) "),a("em",[a("strong",[t._v("---此处与下方调用对应---")])]),t._v("\n{代理的操作+return method.invoke(原类对象,参数)调用原类方法()}")]),t._v(" "),a("h3",{attrs:{id:"获取代理对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取代理对象"}},[t._v("#")]),t._v(" 获取代理对象")]),t._v(" "),a("p",[t._v("代理工具类调用获得代理对象方法")]),t._v(" "),a("h3",{attrs:{id:"通过代理对象调用代理方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过代理对象调用代理方法"}},[t._v("#")]),t._v(" 通过代理对象调用代理方法")]),t._v(" "),a("p",[t._v("代理对象.method(参数)                           "),a("em",[a("strong",[t._v("---此处与invoke处对应---")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);